Project Documentation

    Introduction

    1.1 About the Project

    This project is a comprehensive system based on blockchain technology with a range of additional modules and services:
        Multi-Leader HotStuff Consensus (MultiLeaderHotStuffAdvanced): Ensures fault-tolerant, fast, and secure block agreement in the network.
        Chord Overlay Network (ChordNode): Provides distributed data storage and CRDT mechanisms.
        Advanced Sealevel Engine Layer (AdvancedSealevelEngine): Supports parallel processing of transactions and smart contracts.
        Enhanced Staking Mechanisms (ComputeStakeLedger, CubTekera): Allow operations for staking/rewards.
        Accelerated Large Data Transfer Technologies (TurbineManager, FecChannel): Utilize coding and partial reliable delivery for transferring large data.
        Multi-Signatures (MultiSigTransaction) and Enhanced Transaction Logic (TransactionManager).

    1.2 Project Purpose and Significance

    The main goal is to provide a reliable, scalable, and flexibly extensible platform for decentralized applications. The project combines several ideas:
        High-performance BFT consensus for fast block finalization.
        Distributed storage using Chord/CRDT, simplifying state management, replication, and storage of large datasets.
        An adapted execution environment (SealevelEngine) that allows a large number of transactions to run in parallel without strict conflicts.
        Staking and reward mechanisms (CubTekera, ComputeStakeLedger) to incentivize network participants.
        Enhanced capabilities for transferring large volumes of data (Turbine, FEC) to accelerate and increase the reliability of node interconnections.

    The project is suitable both for experiments with decentralized financial/gaming applications and for more traditional corporate scenarios where consensus data fixation and distributed storage are important.

    Key Goals and Objectives
        Scalability: Increase throughput using sharding, parallel execution (Sealevel), and reliable transmission protocols (Turbine/FEC).
        Reliable Verification: Combine BFT consensus (HotStuff) with a multi-leader architecture, ensuring network resilience to failures and malicious participants.
        Ease of Integration: Provide a multi-level API (see various classes—TransactionManager, CubTekera, etc.) for interacting with smart contracts, staking, and multisig transactions.
        Flexible Storage Architecture: Allow the use of a distributed Chord network for CRDT entities, facilitating consistent storage of large data.
        Optimal Resource Utilization: Enable parallel processing of transactions, adaptive number of consensus layers/conflict graph coloring, and dynamic node configuration (Reconfig mechanisms when necessary).

    Project Architecture and Main Modules

    The system consists of a number of modules/classes that can be grouped by purpose:

        Consensus and Logging Layer:
            MultiLeaderHotStuffAdvanced: An implementation of the HotStuff consensus algorithm, supporting a multi-leader model, processing phases (PREPARE/PRECOMMIT/COMMIT/DECIDE), and block finalization.
            AdvancedBlockStore: Storage for intermediate and final blocks, managing statuses (prepare/precommit/final).
            ProofOfHistory (PoH): Logs events (blocks, transactions) in the chain (vdf-like hashing and storage in Chord), ensuring a fixed chronology.

        P2P Network and Data Transmission Layer:
            NodeNetwork: Manages incoming/outgoing WebSocket connections, message routing (HotStuff, Chord, ML), implementation of view change, etc.
            ChordNode: A classic Chord protocol adapted for hash keys, LWWValue, storing distributed pairs (key -> CRDT).
            TurbineManager, FecChannel: Mechanisms for accelerated transfer and/or recovery of large data packets (Chunking, LZ4, FEC).

        Distributed Storage and State Management Logic:
            ComputeStakeLedger: Logic for staking accounting, batch application of transactions, storage of stake balances and dataset stakes, methods for refunds/slashing.
            CubicMatrix: An example of 3D-CRDT storage (shards, merging, encryption), additionally illustrating the work of the chord network.

        Transaction and Smart Contract Layer:
            AdvancedSealevelEngine: An abstract machine for parallel processing of “programs”/transactions, conflict graph coloring, and layer-by-layer execution.
            BaseTransaction, StakeTxAdapter, MultiSigTxAdapter, TxAdapter: Adapters that bring specific transactions under a unified SealevelEngine execution interface.

        User Operation Management Layer:
            CubTekera: Manages balances within the Tekera network, stores CRDT balance (aesgcm/plain), tracks minted_total, performs transfer operations, and integrates with staking.
            KeyManager: Manages keys (ECDSA, AES), generation/storage/encryption of keys.json, methods for sign/verify.
            TransactionManager: Local transaction pool, logic for “propose BFT transfer”, MLMint, saving in JSON + AES, integration with HotStuff for finalization.
            MiningModule: Examples of machine learning tasks, rewards (ML Reward), partial solutions, local training—illustrating how the system's functionality can be expanded.

    Technologies and Implementation Features
        Programming Language: Python 3.x (asynchronous model with asyncio).
        Network Protocols:
            WebSockets (for inter-node communication).
            Optionally NAT-traversal (UPnP, STUN).
        Cryptography:
            ECDSA (secp256r1) for signing consensus messages and transactions.
            AES-GCM for encrypting local files (keys.json, balances) or additional data.
            BLS (possible extension) for aggregated HotStuff signatures.
        Replication:
            CRDT (LWWValue) in chordnode, allowing multiple nodes to store and update the same keys based on timestamps.
        Storage:
            SQLite/aiosqlite (BlockStore, StakeLedger) — the basic layer.
            chordnode — distributed storage (especially for large objects, shards, ML models).
        Enhanced Throughput:
            SealevelEngine divides transactions into layers (based on conflict graphs), allowing independent transactions to execute in parallel.
            Turbine/FEC ensures fast transmission of large packets.

    Use Cases
        Basic Payments/Transfers in the Network (CubTekera + TransactionManager):
            A user creates a transaction via TransactionManager.propose_bft_transfer(...).
            HotStuff nodes accept the proposal, a block is formed, and it goes through the PREPARE/PRECOMMIT/COMMIT phases.
            Upon the final DECIDE, funds are credited and the transaction receives status="confirmed".
        Staking and Rewards (ComputeStakeLedger, CubTekera):
            A node stakes (via stake_for_dataset, propose_stake_change) — all changes are agreed upon through BFT.
            Rewards (MLRewardTx, partial_reward) are automatically issued if the proof is passed and the max_supply is not exceeded.
        Multi-Signature (MultiSigTransaction):
            Parties create an MST, specify authorized signers, and perform add_signature(...).
            When the required number of signatures is reached, the transaction can be finalized in a block (via propose_bft_block(...)).
        Distributed Storage (ChordNode + LWWValue):
            Writing to the chord storage (chordnode.replicate_locally(key, lww_val)) means multiple nodes can synchronously update and access the data (taking timestamps into account).
        Smart Contracts / Batch Transactions:
            SealevelEngine (run_sealevel_batch) allows executing transaction adapters (BaseTransaction) in bulk, considering parallelism.

    Module Details

    6.1 MultiLeaderHotStuffAdvanced
        Provides for multiple "leaders" in different views (view_num % len(all_nodes)).
        Supports phases: PREPARE, PRECOMMIT, COMMIT, DECIDE.
        Stores blocks in AdvancedBlockStore, records sum_votes, partial_sigs, and tracks complaints.
        Implements double-sign detection and slashing for violators’ stakes.

    6.2 ChordNode
        Supports find_successor, notify, ping, store_req.
        Stores values as LWWValue (value + timestamp).
        Can synchronize with successors/predecessors and maintains lists of fingers, successors, and predecessors.
        Uses background tasks (stabilize, fix_fingers) and can perform a graceful_leave.

    6.3 TransactionManager
        Manages a local pool of transactions (self.transactions).
        Proposes them for consensus (BFT) via HotStuff, marking transactions as status="confirmed" upon a successful commit.
        Saves transactions in JSON (with optional AES) and can wait for await_bft_confirmation.
        Can collect batch transactions in SealevelEngine.

    6.4 AdvancedSealevelEngine
        Accepts a list of transactions (or adapters), builds a conflict graph (read/write).
        Colors the graph to form layers, then executes transactions in parallel (async).
        Uses ProcessPoolExecutor if heavy computations need isolation.

    6.5 CubTekera
        Locally stores the balance (balance_{address}), encrypted with AESGCM (or plain).
        Supports minting, partial_reward, dataset staking, transfers between participants.
        Uses an asyncio.Lock for atomic operations during simultaneous access.

    6.6 FecChannel / TurbineManager
        Designed for accelerated transfer of large blocks/tasks/models:
            FecChannel: Divides data into K parts plus M redundant parts (ZFec), handles transmission and reassembly on the other side.
            TurbineManager: Splits data into chunks, possibly compresses (lz4), and broadcasts through “layers” (fanout) with partial retransmission duplication.

    6.7 MiningModule (Extension Example)
        Demonstrates the integration of ML tasks (classification), distributed partial solutions, and the issuance of rewards (MLRewardTx).
        An example of how the system can be used beyond simple financial transfers.

    Development and Roadmap
        HotStuff Optimization: Plans include full support for aggregated signatures (BLS) and improvements to the ViewChange mechanism.
        Sealevel Enhancement: Support for more complex smart contracts, integration of WASM or Python scripts in a sandbox.
        Multi-Shard Architecture: The possibility of parallel management of different shards (CubTekera / ComputeStakeLedger) and cross-shard transactions.
        Full CRDT Implementation: More advanced structures (OR-Set, Map, Counter) for distributed applications (for example, chat, document management).
        Administrative Tools: User-friendly CLI/GUI tools for node monitoring, transaction viewing, and key management.

    Conclusion

    The project aims to solve complex challenges of decentralized systems:
        A high-load and reliable network,
        A modular architecture,
        Easy deployment (Python/asyncio),
        An extensible platform for smart contracts and related services (ML modules, staking procedures, CRDT storage).

    All modules are united by a common vision: ease of extension (via adapters and classic design patterns) and high fault tolerance ensured by advanced consensus algorithms and distributed storage.

    If you require integration into your own infrastructure, simply configure NodeNetwork (WS), ChordNode (for storage), and launch MultiLeaderHotStuffAdvanced (consensus). You can then connect modules like TransactionManager, CubTekera, etc. If needed, modify/replace modules according to your scenario.

    The project opens up opportunities for a wide range of applications—from DeFi platforms that manage stakes and rewards for ML/PoW, to corporate document management systems where parallel operation execution and consensus fixation of every revision are crucial.
